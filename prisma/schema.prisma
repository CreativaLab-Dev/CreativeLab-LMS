generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Add role for user
enum UserRole {
  USER_BASIC
  USER_PREMIUM
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  studentId     String?   @unique @map("student_id")
  teacherId     String?   @unique @map("teacher_id")
  name          String?
  age           Int?
  aboutMe       String?   @map("about_me")
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?
  role          UserRole  @default(USER_BASIC)
  createdAt     DateTime  @default(now()) @map("created_at")
  accounts      Account[]
  student       Student?  @relation(fields: [studentId], references: [id])
  teacher       Teacher?  @relation(fields: [teacherId], references: [id])

  @@map("users")
}

model Account {
  userId            String   @map("user_id")
  type              String
  provider          String
  providerAccountId String   @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now()) @map("created_at")
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Student {
  id     String @id @default(cuid())
  userId String @unique @map("user_id")
  user   User?

  courses    StudentCourse[]
  answers    StudentAnswer[]
  attendance Attendance[]

  @@map("students")
}

model Teacher {
  id     String @id @default(cuid())
  userId String @unique @map("user_id")
  user   User?

  courses Course[]

  @@map("teachers")
}

model Course {
  id         String          @id @default(cuid())
  name       String
  teacherId  String          @map("teacher_id")
  teacher    Teacher         @relation(fields: [teacherId], references: [id])
  students   StudentCourse[]
  exams      Exam[]
  content    Content[]
  Attendance Attendance[]

  @@map("courses")
}

model StudentCourse {
  studentId String  @map("student_id")
  courseId  String  @map("course_id")
  student   Student @relation(fields: [studentId], references: [id])
  course    Course  @relation(fields: [courseId], references: [id])

  @@id([studentId, courseId])
  @@map("student_courses")
}

model Exam {
  id             String          @id @default(cuid())
  name           String          @map("name")
  courseId       String
  course         Course          @relation(fields: [courseId], references: [id])
  questions      Question[]
  studentAnswers StudentAnswer[]

  @@map("exams")
}

model Question {
  id      String          @id @default(cuid())
  text    String
  examId  String          @map("exam_id")
  exam    Exam            @relation(fields: [examId], references: [id])
  answers StudentAnswer[]

  @@map("questions")
}

model StudentAnswer {
  id         String   @id @default(cuid())
  studentId  String   @map("student_id")
  questionId String   @map("question_id")
  answer     String
  examId     String?
  student    Student  @relation(fields: [studentId], references: [id])
  question   Question @relation(fields: [questionId], references: [id])
  Exam       Exam?    @relation(fields: [examId], references: [id])

  @@map("student_answers")
}

model Attendance {
  id        String   @id @default(cuid())
  studentId String
  courseId  String
  status    String // Example: PRESENT, ABSENT, LATE
  date      DateTime @default(now())
  student   Student  @relation(fields: [studentId], references: [id])
  course    Course   @relation(fields: [courseId], references: [id])

  @@map("attendance")
}

model Content {
  id       String @id @default(cuid())
  courseId String
  title    String
  body     String
  course   Course @relation(fields: [courseId], references: [id])

  @@map("content")
}
