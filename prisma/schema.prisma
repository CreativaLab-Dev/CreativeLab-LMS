datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

// Add role for user
enum UserRole {
  USER_BASIC
  USER_PREMIUM
  ADMIN
}

model User {
  id                  String             @id @default(cuid())
  studentId           String?            @unique @map("student_id")
  teacherId           String?            @unique @map("teacher_id")
  stripeCustomerId    String?            @unique @map("stripe_customer_id")
  name                String?
  age                 Int?
  aboutMe             String?            @map("about_me")
  email               String             @unique
  emailVerified       DateTime?          @map("email_verified")
  image               String?
  password            String?
  role                UserRole           @default(USER_BASIC)
  isAdmin             Boolean            @default(false) @map("is_admin")
  updatedAt           DateTime           @updatedAt @map("updated_at")
  createdAt           DateTime           @default(now()) @map("created_at")
  memberships         Membership[]
  accounts            Account[]
  valorations         Valoration[]
  eventParticipations EventParticipant[]
  Attendance          Attendance[]
  stripeCustomer      stripeCustomer?    @relation(fields: [stripeCustomerId], references: [id], onDelete: Cascade)
  student             Student?           @relation(fields: [studentId], references: [id], onDelete: Cascade)
  teacher             Teacher?           @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  @@map("users")
}

model stripeCustomer {
  id               String   @id @default(cuid())
  userId           String   @unique @map("user_id")
  stripeCustomerId String   @unique @map("stripe_customer_id")
  updatedAt        DateTime @updatedAt @map("updated_at")
  createdAt        DateTime @default(now()) @map("created_at")
  user             User?

  @@map("stripe_customers")
}

model Account {
  userId            String   @map("user_id")
  type              String
  provider          String
  providerAccountId String   @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now()) @map("created_at")
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Student {
  id       String           @id @default(cuid())
  userId   String           @unique @map("user_id")
  user     User?
  courses  StudentCourse[]
  comments ChapterComment[]

  @@map("students")
}

model Membership {
  id             String       @id @default(cuid())
  userId         String       @map("user_id")
  paymentOrderId String       @unique @map("payment_order_id")
  type           String
  status         String
  expiresAt      DateTime     @map("expires_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  createdAt      DateTime     @default(now()) @map("created_at")
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  paymentOrders  PaymentOrder @relation(fields: [paymentOrderId], references: [id], onDelete: Cascade)

  @@map("memberships")
}

model PaymentOrder {
  id         String      @id @default(cuid())
  status     String
  amount     Float
  isPaid     Boolean     @default(false) @map("is_paid")
  phone      String      @default("")
  address    String      @default("")
  updatedAt  DateTime    @updatedAt @map("updated_at")
  createdAt  DateTime    @default(now()) @map("created_at")
  membership Membership?

  @@map("payment_orders")
}

model Teacher {
  id      String   @id @default(cuid())
  userId  String   @unique @map("user_id")
  user    User?
  courses Course[]

  @@map("teachers")
}

model Category {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  updatedAt DateTime @updatedAt @map("updated_at")
  createdAt DateTime @default(now()) @map("created_at")
  courses   Course[]

  @@map("categories")
}

model Course {
  id          String          @id @default(cuid())
  teacherId   String          @map("teacher_id")
  categoryId  String?         @map("category_id")
  name        String          @db.Text
  description String?         @db.Text
  imagePath   String?         @map("image_path") @db.Text
  isFeatured  Boolean         @default(false) @map("is_featured")
  isPublished Boolean         @default(false) @map("is_published")
  isNew       Boolean         @default(false) @map("is_new")
  isPremium   Boolean         @default(false) @map("is_premium")
  updatedAt   DateTime        @updatedAt @map("updated_at")
  createdAt   DateTime        @default(now()) @map("created_at")
  teacher     Teacher         @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  category    Category?       @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  attachments Attachment[]
  students    StudentCourse[]
  chapters    Chapter[]
  valorations Valoration[]

  @@index([categoryId])
  @@map("courses")
}

model Attachment {
  id        String   @id @default(cuid())
  name      String
  url       String   @db.Text
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([courseId])
  @@map("attachments")
}

model Valoration {
  id        String   @id @default(cuid())
  courseId  String   @map("course_id")
  userId    String   @map("user_id")
  value     Int
  updatedAt DateTime @updatedAt @map("updated_at")
  createdAt DateTime @default(now()) @map("created_at")
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("valorations")
}

model StudentCourse {
  studentId String  @map("student_id")
  courseId  String  @map("course_id")
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  course    Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@id([studentId, courseId])
  @@map("student_courses")
}

model Chapter {
  id           String           @id @default(cuid())
  courseId     String?          @map("course_id")
  title        String
  description  String?
  content      String?          @db.Text
  videoUrl     String?          @map("video_url")
  youtubeUrl   String?          @map("youtube_url")
  isPublished  Boolean          @default(false) @map("is_published")
  isFree       Boolean          @default(false) @map("is_free")
  position     Int
  updatedAt    DateTime         @updatedAt @map("updated_at")
  createdAt    DateTime         @default(now()) @map("created_at")
  comments     ChapterComment[]
  userProgress UserProgress[]
  Course       Course?          @relation(fields: [courseId], references: [id])
  muxData      MuxData?

  @@index([courseId])
  @@map("chapters")
}

model MuxData {
  id         String  @id @default(cuid())
  chapterId  String  @map("chapter_id")
  assetId    String  @map("asset_id")
  playbackId String  @map("playback_id")
  chapter    Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  @@unique([chapterId])
  @@map("mux_data")
}

model UserProgress {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  chapterId   String   @map("chapter_id")
  isCompleted Boolean  @default(false) @map("is_completed")
  updatedAt   DateTime @updatedAt @map("updated_at")
  createdAt   DateTime @default(now()) @map("created_at")
  chapter     Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  @@unique([userId, chapterId])
  @@index([chapterId])
  @@map("user_progress")
}

model ChapterComment {
  id        String   @id @default(cuid())
  studentId String?
  lessonId  String   @map("lesson_id")
  userId    String   @map("user_id")
  content   String
  updatedAt DateTime @updatedAt @map("updated_at")
  createdAt DateTime @default(now()) @map("created_at")
  chapter   Chapter  @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  Student   Student? @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@map("chapter_comments")
}

enum EventType {
  VIRTUAL
  PRESENTIAL
  VIRTUAL_AND_PRESENTIAL
}

model Event {
  id           String             @id @default(cuid())
  title        String
  description  String?
  date         DateTime?
  location     String?
  maxCapacity  Int?               @map("max_capacity")
  imageUrl     String?            @map("imageUrl")
  isPublished  Boolean            @default(false) @map("is_published")
  link         String?
  type         EventType?
  updatedAt    DateTime           @updatedAt @map("updated_at")
  createdAt    DateTime           @default(now()) @map("created_at")
  participants EventParticipant[]
  Attendance   Attendance[]

  @@map("events")
}

enum AttendanceStatus {
  PENDING
  CONFIRMED
  CANCELLED
  ATTENDED
  ABSENT
}

model EventParticipant {
  id           String           @id @default(cuid())
  userId       String           @map("user_id")
  eventId      String           @map("event_id")
  status       AttendanceStatus @default(PENDING)
  event        Event            @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user         User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  registeredAt DateTime         @default(now()) @map("registered_at")

  @@map("event_participants")
}

model Attendance {
  id           String           @id @default(cuid())
  eventId      String           @map("event_id")
  userId       String           @map("user_id")
  status       AttendanceStatus @default(PENDING) // Estado de la asistencia
  event        Event            @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user         User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  checkedInAt  DateTime?        @map("checked_in_at")
  checkedOutAt DateTime?        @map("checked_out_at")

  @@map("attendances")
}
