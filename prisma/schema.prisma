generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Add role for user
enum UserRole {
  USER_BASIC
  USER_PREMIUM
  ADMIN
}

model User {
  id            String       @id @default(cuid())
  studentId     String?      @unique @map("student_id")
  teacherId     String?      @unique @map("teacher_id")
  name          String?
  age           Int?
  aboutMe       String?      @map("about_me")
  email         String       @unique
  emailVerified DateTime?    @map("email_verified")
  image         String?
  password      String?
  role          UserRole     @default(USER_BASIC)
  isAdmin       Boolean      @default(false) @map("is_admin")
  createdAt     DateTime     @default(now()) @map("created_at")
  memberships   Membership[]
  accounts      Account[]
  valorations   Valoration[]
  student       Student?     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  teacher       Teacher?     @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  @@map("users")
}

model Account {
  userId            String   @map("user_id")
  type              String
  provider          String
  providerAccountId String   @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now()) @map("created_at")
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Student {
  id       String          @id @default(cuid())
  userId   String          @unique @map("user_id")
  user     User?
  courses  StudentCourse[]
  comments LessonComment[]

  @@map("students")
}

model Membership {
  id             String       @id @default(cuid())
  userId         String       @map("user_id")
  paymentOrderId String       @unique @map("payment_order_id")
  type           String
  status         String
  expiresAt      DateTime     @map("expires_at")
  createdAt      DateTime     @default(now()) @map("created_at")
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  paymentOrders  PaymentOrder @relation(fields: [paymentOrderId], references: [id], onDelete: Cascade)

  @@map("memberships")
}

model PaymentOrder {
  id         String      @id @default(cuid())
  status     String
  amount     Float
  isPaid     Boolean     @default(false)
  phone      String      @default("")
  address    String      @default("")
  createdAt  DateTime    @default(now())
  membership Membership?

  @@map("payment_orders")
}

model Teacher {
  id      String   @id @default(cuid())
  userId  String   @unique @map("user_id")
  user    User?
  courses Course[]

  @@map("teachers")
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  slug      String   @unique
  createdAt DateTime @default(now())
  // Relación con cursos (una categoría puede tener muchos cursos)
  courses   Course[]

  @@map("categories")
}

model Course {
  id          String          @id @default(cuid())
  teacherId   String          @map("teacher_id")
  categoryId  Int?
  name        String
  description String?
  imagePath   String?         @map("image_path")
  isFeatured  Boolean         @default(false) @map("is_featured")
  isNew       Boolean         @default(false) @map("is_new")
  isPremium   Boolean         @default(false) @map("is_premium")
  createdAt   DateTime        @default(now()) @map("created_at")
  teacher     Teacher         @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  Category    Category?       @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  students    StudentCourse[]
  modules     Module[]
  valorations Valoration[]

  @@map("courses")
}

model Valoration {
  id        String   @id @default(cuid())
  courseId  String   @map("course_id")
  userId    String   @map("user_id")
  value     Int
  createdAt DateTime @default(now()) @map("created_at")
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("valorations")
}

model StudentCourse {
  studentId String  @map("student_id")
  courseId  String  @map("course_id")
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  course    Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@id([studentId, courseId])
  @@map("student_courses")
}

model Module {
  id          String   @id @default(cuid())
  title       String
  description String
  courseId    String   @map("course_id")
  courses     Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons     Lesson[]

  @@map("modules")
}

model Lesson {
  id          String          @id @default(cuid())
  moduleId    String          @map("module_id")
  title       String
  description String
  content     String?         @db.Text
  videoUrl    String?         @map("video_url")
  seen        Boolean         @default(false)
  module      Module          @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  createdAt   DateTime        @default(now()) @map("created_at")
  comments    LessonComment[]

  @@map("lessons")
}

model LessonComment {
  id        String   @id @default(cuid())
  lessonId  String   @map("lesson_id")
  userId    String   @map("user_id")
  content   String
  createdAt DateTime @default(now()) @map("created_at")
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  Student   Student? @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId String?

  @@map("lesson_comments")
}
